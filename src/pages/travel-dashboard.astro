---
// Dashboard page for real-time price monitoring
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Travel Dashboard - Price Monitor</title>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Price Monitor Dashboard</h1>
                <p class="text-gray-600 mt-1">Real-time tracking of your travel deals</p>
            </div>
            <a
                href="/travel"
                class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg transition"
            >
                New Search
            </a>
        </div>

        <!-- Trip Details Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Trip Details</h2>
            <div id="tripInfo" class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <!-- Populated by JavaScript -->
            </div>
        </div>

        <!-- Status Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div class="flex items-center justify-between">
                <div>
                    <h2 class="text-xl font-semibold text-gray-900">Monitoring Status</h2>
                    <p id="statusText" class="text-gray-600 mt-1">Initializing...</p>
                </div>
                <div id="statusIndicator" class="w-4 h-4 rounded-full bg-yellow-400 animate-pulse"></div>
            </div>
            <div class="mt-4">
                <p id="lastCheck" class="text-sm text-gray-500">Last checked: Never</p>
                <p id="nextCheck" class="text-sm text-gray-500">Next check in: 30s</p>
            </div>
        </div>

        <!-- Price Cards Grid -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <!-- Flight Card -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">‚úàÔ∏è Flight</h3>
                    <span id="flightBadge" class="px-3 py-1 text-xs font-semibold rounded-full bg-gray-200 text-gray-700">
                        Checking...
                    </span>
                </div>
                <div id="flightPrice" class="text-3xl font-bold text-gray-900 mb-2">--</div>
                <div id="flightCarrier" class="text-sm text-gray-600 mb-3">Carrier: --</div>
                <div class="text-xs text-gray-500">
                    Budget: $<span id="flightBudgetDisplay"></span>
                </div>
            </div>

            <!-- Hotel Card -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">üè® Hotel</h3>
                    <span id="hotelBadge" class="px-3 py-1 text-xs font-semibold rounded-full bg-gray-200 text-gray-700">
                        Checking...
                    </span>
                </div>
                <div id="hotelPrice" class="text-3xl font-bold text-gray-900 mb-2">--</div>
                <div id="hotelName" class="text-sm text-gray-600 mb-3">Hotel: --</div>
                <div class="text-xs text-gray-500">
                    Budget per night: $<span id="hotelBudgetDisplay"></span>
                </div>
            </div>

            <!-- Car Card -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">üöó Car Rental</h3>
                    <span id="carBadge" class="px-3 py-1 text-xs font-semibold rounded-full bg-gray-200 text-gray-700">
                        Checking...
                    </span>
                </div>
                <div id="carPrice" class="text-3xl font-bold text-gray-900 mb-2">--</div>
                <div id="carType" class="text-sm text-gray-600 mb-3">Type: --</div>
                <div class="text-xs text-gray-500">
                    Budget per day: $<span id="carBudgetDisplay"></span>
                </div>
            </div>
        </div>

        <!-- Total Cost Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div class="flex items-center justify-between">
                <div>
                    <h2 class="text-xl font-semibold text-gray-900 mb-2">Total Trip Cost</h2>
                    <div id="totalCost" class="text-4xl font-bold text-gray-900">--</div>
                </div>
                <div class="text-right">
                    <div class="text-sm text-gray-600 mb-2">Your Budget</div>
                    <div id="totalBudgetDisplay" class="text-2xl font-semibold text-gray-700">--</div>
                </div>
            </div>
            <div id="budgetBar" class="mt-4 h-2 bg-gray-200 rounded-full overflow-hidden">
                <div id="budgetProgress" class="h-full bg-blue-600 transition-all duration-500" style="width: 0%"></div>
            </div>
            <p id="budgetStatus" class="text-sm text-gray-600 mt-2">Waiting for price data...</p>
        </div>

        <!-- Price History -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Price History</h2>
            <div id="priceHistory" class="space-y-3 max-h-96 overflow-y-auto">
                <p class="text-gray-500 text-center py-8">No price checks yet. Monitoring will start shortly...</p>
            </div>
        </div>
    </div>

    <script>
        interface TripDetails {
            origin: string;
            destination: string;
            startDate: string;
            endDate: string;
            totalBudget: number;
            flightBudget: number;
            hotelBudgetPerNight: number;
            carBudgetPerDay: number;
        }

        interface PriceCheck {
            flight: {
                price: number;
                carrier: string;
                withinBudget: boolean;
            };
            hotel: {
                pricePerNight: number;
                name: string;
                withinBudget: boolean;
            };
            car: {
                pricePerDay: number;
                type: string;
                withinBudget: boolean;
            };
            totalCost: number;
            withinTotalBudget: boolean;
            timestamp: string;
        }

        let tripDetails: TripDetails | null = null;
        let monitoringInterval: number | null = null;
        let priceHistory: PriceCheck[] = [];
        let nextCheckTimer: number | null = null;
        let secondsUntilNextCheck = 30;

        // Load trip details from sessionStorage
        function loadTripDetails() {
            const stored = sessionStorage.getItem('tripDetails');
            if (!stored) {
                window.location.href = '/travel';
                return;
            }

            tripDetails = JSON.parse(stored);
            displayTripDetails();
            startMonitoring();
        }

        function displayTripDetails() {
            if (!tripDetails) return;

            const tripInfo = document.getElementById('tripInfo');
            if (tripInfo) {
                tripInfo.innerHTML = `
                    <div>
                        <div class="text-gray-500">Route</div>
                        <div class="font-semibold text-gray-900">${tripDetails.origin} ‚Üí ${tripDetails.destination}</div>
                    </div>
                    <div>
                        <div class="text-gray-500">Start Date</div>
                        <div class="font-semibold text-gray-900">${new Date(tripDetails.startDate).toLocaleDateString()}</div>
                    </div>
                    <div>
                        <div class="text-gray-500">End Date</div>
                        <div class="font-semibold text-gray-900">${new Date(tripDetails.endDate).toLocaleDateString()}</div>
                    </div>
                    <div>
                        <div class="text-gray-500">Duration</div>
                        <div class="font-semibold text-gray-900">${calculateDays()} days</div>
                    </div>
                `;
            }

            // Update budget displays
            document.getElementById('flightBudgetDisplay')!.textContent = tripDetails.flightBudget.toString();
            document.getElementById('hotelBudgetDisplay')!.textContent = tripDetails.hotelBudgetPerNight.toString();
            document.getElementById('carBudgetDisplay')!.textContent = tripDetails.carBudgetPerDay.toString();
            document.getElementById('totalBudgetDisplay')!.textContent = `$${tripDetails.totalBudget.toLocaleString()}`;
        }

        function calculateDays(): number {
            if (!tripDetails) return 0;
            const start = new Date(tripDetails.startDate);
            const end = new Date(tripDetails.endDate);
            return Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
        }

        async function checkPrices() {
            if (!tripDetails) return;

            updateStatus('Checking prices...', 'checking');

            try {
                const response = await fetch('/api/check-prices', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(tripDetails),
                });

                if (!response.ok) throw new Error('Failed to check prices');

                const priceCheck: PriceCheck = await response.json();
                updatePriceDisplay(priceCheck);
                addToPriceHistory(priceCheck);
                updateStatus('Monitoring active', 'active');

                const lastCheckEl = document.getElementById('lastCheck');
                if (lastCheckEl) {
                    lastCheckEl.textContent = `Last checked: ${new Date().toLocaleTimeString()}`;
                }
            } catch (error) {
                console.error('Error checking prices:', error);
                updateStatus('Error checking prices', 'error');
            }
        }

        function updatePriceDisplay(priceCheck: PriceCheck) {
            // Update flight
            document.getElementById('flightPrice')!.textContent = `$${priceCheck.flight.price}`;
            document.getElementById('flightCarrier')!.textContent = `Carrier: ${priceCheck.flight.carrier}`;
            updateBadge('flightBadge', priceCheck.flight.withinBudget);

            // Update hotel
            document.getElementById('hotelPrice')!.textContent = `$${priceCheck.hotel.pricePerNight}/night`;
            document.getElementById('hotelName')!.textContent = `Hotel: ${priceCheck.hotel.name}`;
            updateBadge('hotelBadge', priceCheck.hotel.withinBudget);

            // Update car
            document.getElementById('carPrice')!.textContent = `$${priceCheck.car.pricePerDay}/day`;
            document.getElementById('carType')!.textContent = `Type: ${priceCheck.car.type}`;
            updateBadge('carBadge', priceCheck.car.withinBudget);

            // Update total
            document.getElementById('totalCost')!.textContent = `$${priceCheck.totalCost.toLocaleString()}`;

            const percentage = (priceCheck.totalCost / tripDetails!.totalBudget) * 100;
            const progressBar = document.getElementById('budgetProgress');
            if (progressBar) {
                progressBar.style.width = `${Math.min(percentage, 100)}%`;
                progressBar.className = `h-full transition-all duration-500 ${
                    priceCheck.withinTotalBudget ? 'bg-green-600' : 'bg-red-600'
                }`;
            }

            const budgetStatus = document.getElementById('budgetStatus');
            if (budgetStatus) {
                if (priceCheck.withinTotalBudget) {
                    const savings = tripDetails!.totalBudget - priceCheck.totalCost;
                    budgetStatus.textContent = `‚úÖ Within budget! You'd save $${savings.toLocaleString()}`;
                    budgetStatus.className = 'text-sm text-green-600 font-semibold mt-2';
                } else {
                    const overage = priceCheck.totalCost - tripDetails!.totalBudget;
                    budgetStatus.textContent = `‚ùå Over budget by $${overage.toLocaleString()}`;
                    budgetStatus.className = 'text-sm text-red-600 font-semibold mt-2';
                }
            }
        }

        function updateBadge(elementId: string, withinBudget: boolean) {
            const badge = document.getElementById(elementId);
            if (badge) {
                if (withinBudget) {
                    badge.textContent = '‚úì Good Deal';
                    badge.className = 'px-3 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800';
                } else {
                    badge.textContent = '‚ö† Over Budget';
                    badge.className = 'px-3 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800';
                }
            }
        }

        function updateStatus(text: string, status: 'checking' | 'active' | 'error') {
            const statusText = document.getElementById('statusText');
            const statusIndicator = document.getElementById('statusIndicator');

            if (statusText) statusText.textContent = text;

            if (statusIndicator) {
                statusIndicator.className = `w-4 h-4 rounded-full ${
                    status === 'checking' ? 'bg-yellow-400 animate-pulse' :
                    status === 'active' ? 'bg-green-400' :
                    'bg-red-400'
                }`;
            }
        }

        function addToPriceHistory(priceCheck: PriceCheck) {
            priceHistory.unshift(priceCheck);
            if (priceHistory.length > 50) priceHistory.pop();

            const historyEl = document.getElementById('priceHistory');
            if (!historyEl) return;

            historyEl.innerHTML = priceHistory.map((check, index) => {
                const time = new Date(check.timestamp).toLocaleTimeString();
                const isGoodDeal = check.withinTotalBudget;

                return `
                    <div class="flex items-center justify-between p-3 rounded-lg ${
                        isGoodDeal ? 'bg-green-50 border border-green-200' : 'bg-gray-50 border border-gray-200'
                    }">
                        <div class="flex items-center space-x-4 flex-1">
                            <div class="text-sm text-gray-600">${time}</div>
                            <div class="text-sm">
                                <span class="font-semibold">Flight:</span> $${check.flight.price} |
                                <span class="font-semibold">Hotel:</span> $${check.hotel.pricePerNight}/nt |
                                <span class="font-semibold">Car:</span> $${check.car.pricePerDay}/day
                            </div>
                        </div>
                        <div class="text-right">
                            <div class="text-lg font-bold ${isGoodDeal ? 'text-green-700' : 'text-gray-700'}">
                                $${check.totalCost.toLocaleString()}
                            </div>
                            ${isGoodDeal ? '<div class="text-xs text-green-600 font-semibold">Good Deal!</div>' : ''}
                        </div>
                    </div>
                `;
            }).join('');
        }

        function startMonitoring() {
            // Initial check
            checkPrices();

            // Start countdown timer
            secondsUntilNextCheck = 30;
            nextCheckTimer = window.setInterval(() => {
                secondsUntilNextCheck--;
                const nextCheckEl = document.getElementById('nextCheck');
                if (nextCheckEl) {
                    nextCheckEl.textContent = `Next check in: ${secondsUntilNextCheck}s`;
                }

                if (secondsUntilNextCheck <= 0) {
                    secondsUntilNextCheck = 30;
                }
            }, 1000);

            // Check prices every 30 seconds
            monitoringInterval = window.setInterval(checkPrices, 30000);
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (monitoringInterval) clearInterval(monitoringInterval);
            if (nextCheckTimer) clearInterval(nextCheckTimer);
        });

        // Initialize
        loadTripDetails();
    </script>
</body>
</html>
